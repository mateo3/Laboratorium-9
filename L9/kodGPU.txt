%%cu
#include <stdio.h>
#define N 1024
__global__ void add(int *a, int *b, int *c) {
  int tid = blockIdx.x;
  if (tid < N)
  c[tid] = a[tid] + b[tid];
}

int main() {
  cudaEvent_t start, stop;
  cudaEventCreate( &start ) ;
  cudaEventCreate( &stop ) ;
  cudaEventRecord( start, 0 ) ;
  int a[N], b[N], c[N];
  int *dev_a, *dev_b, *dev_c;
  cudaMalloc( (void**)&dev_a, N * sizeof(int) );
  cudaMalloc( (void**)&dev_b, N * sizeof(int) );
  cudaMalloc( (void**)&dev_c, N * sizeof(int) );
  for (int i=0; i<N; i++) {
  a[i] = -i;
  b[i] = i * i;
  }
  cudaMemcpy( dev_a, a, N * sizeof(int), cudaMemcpyHostToDevice );
  cudaMemcpy( dev_b, b, N * sizeof(int), cudaMemcpyHostToDevice );
  add<<<N,3000>>>( dev_a, dev_b, dev_c );
  cudaMemcpy( c, dev_c, N * sizeof(int), cudaMemcpyDeviceToHost );
  for (int i=0; i<N; i++) {
    printf( "%d + %d = %d\n", a[i], b[i], c[i] );
  }
  cudaEventRecord( stop, 0 );
  cudaEventSynchronize( stop );
  float czas;
  cudaEventElapsedTime( &czas, start, stop );
  printf( "Czas wykonania %3.2f ms\n", czas );
  cudaEventDestroy( start );
  cudaEventDestroy( stop );
  cudaFree( dev_a );
  cudaFree( dev_b );
  cudaFree( dev_c );
  return 0;
}